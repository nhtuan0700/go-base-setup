basePath: /api/v1
definitions:
  http.CheckHealthResponse:
    properties:
      message:
        example: API is ok
        type: string
    type: object
  http.CreateUserRequest:
    properties:
      email:
        type: string
      name:
        type: string
    required:
    - email
    - name
    type: object
  http.CreateUserResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  http.ErrorResponse:
    properties:
      message:
        type: string
    type: object
  http.GetUserResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  http.UpdateUserRequest:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  http.UpdateUserResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
host: HOST_NAME
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: Go example API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Go example
  version: "1.0"
paths:
  /health:
    get:
      consumes:
      - application/json
      description: Check api health
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.CheckHealthResponse'
      summary: Check api health
  /users/:
    post:
      consumes:
      - application/json
      description: Create user
      parameters:
      - description: CreateUserRequest
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/http.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.CreateUserResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.ErrorResponse'
      summary: Create user
      tags:
      - user
  /users/:id:
    delete:
      consumes:
      - application/json
      description: Delete user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.ErrorResponse'
      summary: Delete user
      tags:
      - user
    put:
      consumes:
      - application/json
      description: Update user
      parameters:
      - description: UpdateUserRequest
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/http.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.UpdateUserResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.ErrorResponse'
      summary: Update user
      tags:
      - user
  /users/get/:id:
    get:
      consumes:
      - application/json
      description: Get user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.GetUserResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/http.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http.ErrorResponse'
      summary: Get user
      tags:
      - user
swagger: "2.0"
