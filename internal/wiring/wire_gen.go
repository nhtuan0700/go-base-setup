// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wiring

import (
	"base-setup/internal/app"
	"base-setup/internal/configs"
	"base-setup/internal/dataacess/database"
	"base-setup/internal/handler/v1"
	"base-setup/internal/logic"
	"base-setup/internal/utils"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitializeStandaloneServer() (*app.Server, func(), error) {
	config, err := configs.NewConfig()
	if err != nil {
		return nil, nil, err
	}
	log := config.Log
	logger, cleanup, err := utils.InitializeLogger(log)
	if err != nil {
		return nil, nil, err
	}
	http := config.HTTP
	checkHealthHandler := handler.NewCheckHealthHandler()
	configsDatabase := config.Database
	db, err := database.InitializeDB(logger, configsDatabase)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	userDataAccessor := database.NewUserDataAccessor(db, logger)
	userLogic := logic.NewUserLogic(userDataAccessor, db, logger)
	userHandler := handler.NewUserHandler(userLogic, logger)
	postHandler := handler.NewPostHandler(userLogic, logger)
	handlerHandler := handler.Handler{
		CheckHealthHandler: checkHealthHandler,
		UserHandler:        userHandler,
		PostHandler:        postHandler,
	}
	server := app.NewStandaloneServer(logger, http, handlerHandler)
	return server, func() {
		cleanup()
	}, nil
}

// wire.go:

var WireSet = wire.NewSet(utils.WireSet, app.WireSet, configs.WireSet, handler.WireSet, logic.WireSet, database.WireSet)
